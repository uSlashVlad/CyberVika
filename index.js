const Telegraf = require('telegraf');
const advancedAPI = require('./src/dogcat-api');
const randAPI = require('./src/rand-api');
const random = require('./src/random');
const axios = require('axios');
const querystring = require('querystring');
require('colors');

require('dotenv').config();
const bot = new Telegraf(process.env.BOT_TOKEN);


// Variants of answer on question pattern "–í–æ–ø—Ä–æ—Å: <—Ç–µ–∫—Å—Ç>?"
const ansVariants = [
    '–î–∞, –∫–æ–Ω–µ—á–Ω–æ',
    '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ',
    '–ù—É –∫–æ–Ω–µ—á–Ω–æ –∂–µ!',
    '–í –ø—Ä–∏–Ω—Ü–∏–ø–µ –¥–∞...',
    '–ê –∫–∞–∫–æ–π —É —Ç–µ–±—è –æ—Ç–≤–µ—Ç?',
    '–î—É–º–∞—é –¥–∞',
    '–ü–æ–∫–∞ —á—Ç–æ –¥–∞',
    '–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç',
    '–ú–æ–∂–µ—Ç –±—ã—Ç—å',
    '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å',
    '–ù–µ –ø–æ–Ω—è—Ç–Ω–æ...',
    '–°–ø—Ä–æ—Å–∏ –ª—É—á—à–µ –Ω–∞—Å—Ç–æ—è—â—É—é –í–∏–∫—É',
    '–Ø –∑–¥–µ—Å—å –Ω–∏—á–µ–º –Ω–µ –ø–æ–º–æ–≥—É',
    '–ù–µ –¥—É–º–∞—é',
    '–í—Ä—è–¥ –ª–∏',
    '–¢–æ—á–Ω–æ –Ω–µ—Ç',
    '–ù—É –Ω–µ –∑–Ω–∞—é...',
    '–î–∞ –∫–æ–Ω–µ—á–Ω–æ –∂–µ –Ω–µ—Ç!'
];

const pixApiUrl = 'https://pixabay.com/api/';


bot.use((ctx, next) => {
    // Logging
    // console.log(ctx);
    const date = new Date();
    let str = ('[' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds() + '] ').dim;
    if (ctx.from.username)
        str += ctx.from.username.cyan + ' > ';

    if (ctx.chat) {
        if (ctx.chat.title !== undefined)
            str += ctx.chat.title.cyan + ': ';
        else
            str += ctx.me.cyan + ': ';
    }

    if (ctx.updateSubTypes[0] === 'text')
        str += ctx.message.text;
    else if (ctx.updateSubTypes.length === 0) {
        if (ctx.updateType === 'edited_message')
            str += '[E] '.yellow + ctx.update.edited_message.text;
        else if (ctx.updateType === 'callback_query')
            str += '[CQ] '.magenta + ctx.update.callback_query.data;
    }
    else
        str += ctx.updateSubTypes[0].red;

    console.log(str);
    next();
});


// Handling /start command
bot.start(ctx => {
    ctx.reply('Hello World!');
});

// Handling /help command
bot.help(ctx => {
    ctx.reply('–ê?', {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ß—Ç–æ –º–æ–∂–µ—à—å?', callback_data: 'help_commands' }],
                [{ text: '–û –±–æ—Ç–µ', callback_data: 'help_about' }]
            ]
        }
    });
});

bot.command('gay', ctx => {
    let message = `<b>[ –°–æ–∑–¥–∞—Ç–µ–ª—å ]</b>
<a href="https://t.me/uslashvlad">uslashvlad</a>
<a href="https://github.com/uSlashVlad">GitHub</a> <a href="https://vk.com/uslashvlad">–í–ö</a>
<i>–ù–µ –ß–°–í :)</i>`;
    ctx.reply(message, {
        parse_mode: "html",
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≥–æ–ª–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞', url: 'https://qiwi.com/n/VLADN' }]
            ]
        }
    });
});

// Handling /echo command
bot.command('echo', ctx => {
    const input = ctx.message.text;
    const args = input.split(' ');
    args.shift();

    let message;
    if (args.length > 0)
        message = args.join(' ');
    else
        message = '–ù—É–∂–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞';

    ctx.reply(message);
});

// Handling simple /luck command
bot.command('luck', ctx => {
    const res = random.chance(0.5);
    let message = '–®–∞–Ω—Å –Ω–∞ —É–¥–∞—Ä –ø–æ –∂–æ–ø–µ: <b>0.5</b>\n';

    if (res) {
        message += '–¢–µ–±–µ –Ω–µ –ø–æ–≤–µ–∑–ª–æ, –ø–æ–ª—É—á–∞–π –ø–æ –∂–æ–ø–µ üëãüëãüëã';
    } else {
        message += '–¢–µ–±–µ –ø–æ–≤–µ–∑–ª–æ, —Ç–≤–æ—è –∂–æ–ø–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏';
    }

    ctx.reply(message, { parse_mode: "html" });
});

// Handling /f command
bot.command('f', ctx => {
    ctx.getStickerSet('FforRespect').then(response => {
        const stickers = response.stickers;
        const randSticker = random.arrElem(stickers).file_id;
        ctx.replyWithSticker(randSticker);
    })
});

// Handling Advanced API commands
bot.command('adv_cat', ctx => {
    sendFileFromAdvancedApi(ctx, 0);
});
bot.command('adv_dog', ctx => {
    sendFileFromAdvancedApi(ctx, 1);
});

// Handling Simple rand API commands
bot.command('dog', ctx => {
    sendAnimalFromSimpleApi(ctx, 'dog');
});
bot.command('cat', ctx => {
    sendAnimalFromSimpleApi(ctx, 'cat');
});
bot.command('panda', ctx => {
    sendAnimalFromSimpleApi(ctx, 'panda');
});
bot.command('red_panda', ctx => {
    sendAnimalFromSimpleApi(ctx, 'red_panda');
});
bot.command('fox', ctx => {
    sendAnimalFromSimpleApi(ctx, 'fox');
});
bot.command('bird', ctx => {
    sendAnimalFromSimpleApi(ctx, 'bird');
});
bot.command('koala', ctx => {
    sendAnimalFromSimpleApi(ctx, 'koala');
});
bot.command('wink', ctx => {
    sendAnimeFromSimpleApi(ctx, 'wink');
});
bot.command('pat', ctx => {
    sendAnimeFromSimpleApi(ctx, 'pat');
});
bot.command('hug', ctx => {
    sendAnimeFromSimpleApi(ctx, 'hug');
});
bot.command('pikachu', ctx => {
    sendAnimeFromSimpleApi(ctx, 'pikachu');
});
bot.command('meme', ctx => {
    sendMemeFromSimpleApi(ctx);
});


// Handling text messages
bot.on('text', ctx => {
    const text = ctx.message.text;

    // Handling "–í–æ–ø—Ä–æ—Å: <—Ç–µ–∫—Å—Ç>?" messages
    if (text.toLowerCase().startsWith('–≤–æ–ø—Ä–æ—Å:') && text.endsWith('?')) {
        ctx.reply(random.arrElem(ansVariants));
    }
});

// Pixabay search
bot.inlineQuery(/pix\s.+/, async ctx => {
    const input = ctx.inlineQuery.query.split(' ');
    input.shift();

    const query = input.join(' ');
    if (query === '' || query === undefined) return;

    let urlBody = {
        key: process.env.PIX_API_KEY,
        q: query
    };
    let _url = pixApiUrl + '?' + querystring.stringify(urlBody);
    let result = await loadDataFromPixabay(_url);

    ctx.answerInlineQuery(result);
});


// Handling actions of /help command
bot.action('help_commands', (ctx, next) => {
    let message = `<b>[ –ö–æ–º–º–∞–Ω–¥—ã ]</b>
    
-–æ—Å–Ω–æ–≤–Ω—ã–µ-
/start - <i>"Hello World!"</i>
/help - <i>–ø–æ–º–æ—â—å</i>
/gay - <i>–º–µ–Ω—é –º–æ–µ–≥–æ —á—Å–≤</i>
/echo <code>[—Ç–µ–∫—Å—Ç]</code> - <i>–±–æ—Ç –≤—ã–≤–µ–¥–µ—Ç —Ç–µ–∫—Å—Ç</i>
/luck - <i>—Ä–∞–Ω–¥–æ–º–Ω–æ –¥–∞—Å—Ç/–Ω–µ –¥–∞—Å—Ç –ø–æ –∂–æ–ø–µ</i>

-—Ä–∞–Ω–¥–æ–º–Ω—ã–µ –∞–ø–∏-
–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ –∞–ø–∏:
/adv_cat <code>~photo|gif~</code> - <i>—Ñ–æ—Ç–∫–∞/–≥–∏—Ñ–∫–∞ –∫–æ—Ç–∞ –∏–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ø–∏</i>
/adv_dog <code>~photo|gif~</code> - <i>—Ñ–æ—Ç–∫–∞/–≥–∏—Ñ–∫–∞ —Å–æ–±–∞–∫–µ–Ω–∞ –∏–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ø–∏</i>
–ø—Ä–æ—Å—Ç–æ–µ –∞–ø–∏:
/cat - <i>—Ñ–æ—Ç–∫–∞ –∫–æ—Ç–∏–∫–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–µ –æ –∫–æ—Ç–∏–∫–∞—Ö</i>
/dog - <i>—Ñ–æ—Ç–∫–∞ –ø—ë—Å–∏–∫–∞ —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–µ –æ –ø—ë—Å–∏–∫–∞—Ö</i>
/panda - <i>—Ñ–æ—Ç–∫–∞ –ø–∞–Ω–¥—ã —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–µ –æ –ø–∞–Ω–¥–∞—Ö</i>
/red_panda - <i>—Ñ–æ—Ç–∫–∞ –∫—Ä–∞—Å–Ω–æ–π –ø–∞–Ω–¥—ã —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–µ –æ –ø–∞–Ω–¥–∞—Ö</i>
/fox -<i> —Ñ–æ—Ç–∫–∞ –ª–∏—Å—ã —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–µ –æ –ª–∏—Å–∞—Ö</i>
/bird - <i>—Ñ–æ—Ç–∫–∞ –ø—Ç–∏—á–∫–∏ —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–µ –æ –ø—Ç–∏—á–∫–∞—Ö</i>
/koala - <i>—Ñ–æ—Ç–∫–∞ –∫–æ–∞–ª—ã —Å —Å–ª—É—á–∞–π–Ω—ã–º —Ñ–∞–∫—Ç–µ –æ –∫–æ–∞–ª–∞—Ö</i>
/wink /pat /hug - <i>–∞–Ω–∏–º–µ –≥–∏—Ñ–∫–∏</i>
/pikachu - <i>–ü–ò–ö–ê–ß–£!!! –≥–∏—Ñ–∫–∞</i>
/meme - <i>—Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–µ–º –Ω–∞ –ø–µ–Ω–¥–æ—Å–∫–æ–º —è–∑—ã–∫–µ (–ø–æ–∫–∞ —Ç—É–ø—ã–µ –º–µ–º—ã)</i>

-–∑–∞–ø—Ä–æ—Å—ã-
<i>–≠—Ç–æ –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ –∏–∑ –±–µ—Å–µ–¥—ã –∏–ª–∏ –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ —Å –±–æ—Ç–æ–º.
–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ–Ω–∏ —Ä–∞–±–æ—Ç–∞–ª–∏ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.
–ü–æ–∫–∞ —á—Ç–æ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ —Å —Å–µ—Ä–≤–∏—Å–æ–º <b>Pixabay</b></i>.
@cybervika_bot pix <code>[—Ç–µ–∫—Å—Ç]</code>

-–¥—Ä—É–≥–æ–µ-
–í–æ–ø—Ä–æ—Å: <code>[—Ç–µ–∫—Å—Ç]</code>? - <i>–±–æ—Ç –∫–∞–∫-–Ω–∏–±—É–¥—å –æ—Ç–≤–µ—á–∞–µ—Ç –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ –¥–∞/–Ω–µ—Ç</i>`;

    ctx.editMessageText(message, { parse_mode: "html" }).then(() => {
        ctx.answerCbQuery().then(next());
    })
});
bot.action('help_about', (ctx, next) => {
    const date = new Date();
    const message = `–í—Å—ë —Å–¥–µ–ª–∞–Ω–æ —Ä–∞–¥–∏ <a href="https://new.umschool.net/core/profile/">–£–º—Å–∫—É–ª–∞</a>

<b>[ –û –±–æ—Ç–µ ]</b>
–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –±–µ—Å–µ–¥—ã <b>–î–µ—Ç–∏ –í–∏–∫–∏</b>
–£–∑–Ω–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—ã /help
<a href="https://github.com/uSlashVlad/CyberVika">–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥</a>

<b>[ –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ API ]</b>
<a href="https://some-random-api.ml/">–ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –ê–ü–ò</a>
<a href="https://api.thecatapi.com/">–ê–ü–ò —Å –∫–æ—Ç–∏–∫–∞–º–∏</a>
<a href="https://api.thedogapi.com/">–ê–ü–ò —Å –ø—ë—Å–∏–∫–∞–º–∏</a>
<a href="https://pixabay.com/service/about/api/">Pixabay API</a>
<b>–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${date.getHours()} : ${date.getMinutes()} : ${date.getSeconds()}</b>`;

    ctx.editMessageText(message, { parse_mode: "html" }).then(() => {
        ctx.answerCbQuery().then(next());
    });
});

// Actions of animals votes
bot.action('cat_upvote', ctx => {
    handleVoteForFileFromAdvancedApi(ctx, 0, 1);
});
bot.action('cat_downvote', ctx => {
    handleVoteForFileFromAdvancedApi(ctx, 0, 0);
});
bot.action('dog_upvote', ctx => {
    handleVoteForFileFromAdvancedApi(ctx, 1, 1);
});
bot.action('dog_downvote', ctx => {
    handleVoteForFileFromAdvancedApi(ctx, 1, 0);
});


bot.launch().then(() => {
    advancedAPI.bot = bot;
    console.log('Bot has been started!'.green)
});


// Loading data from Pixabay using HTTP GET request
async function loadDataFromPixabay(url) {
    return new Promise(resolve => {
        axios.get(url).then(res => {
            let data = res.data.hits;

            resolve(data.map((item, index) => {
                return {
                    type: 'photo',
                    id: String(index),
                    photo_url: item.webformatURL,
                    thumb_url: item.previewURL
                }
            }));
        });
    })
}

// Sending message with picture from Simple rand API
async function sendAnimalFromSimpleApi(ctx, type) {
    await bot.telegram.sendChatAction(ctx.chat.id, 'upload_photo');

    const imgRes = await randAPI.loadDataFromApi('image', type);
    const url = imgRes.data.link;
    const factRes = await randAPI.loadDataFromApi('fact', type);
    const fact = `–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç: ${factRes.data.fact}`;


    if (url.endsWith('.jpg') || url.endsWith('.png')) {
        await ctx.replyWithPhoto(url, { caption: fact });
    }
    else if (url.endsWith('.gif')) {
        await ctx.sendAnimation(ctx.chat.id, url, { caption: fact })
    }

    console.log(`${'–§–æ—Ç–æ: '.blue} ${url}\n${fact.dim}`);
}

// Sending message with animation from Simple rand API
async function sendAnimeFromSimpleApi(ctx, type) {
    await bot.telegram.sendChatAction(ctx.chat.id, 'upload_video');

    const gifRes = await randAPI.loadDataFromApi('anime', type);
    const gif = gifRes.data.link;

    await bot.telegram.sendAnimation(ctx.chat.id, gif);
    console.log(`${'Anime gif: '.dim}${gif}`)
}

// Sending message with meme from Simple rand API
async function sendMemeFromSimpleApi(ctx) {
    await bot.telegram.sendChatAction(ctx.chat.id, 'upload_photo');

    const imgRes = await randAPI.loadDataFromApi('meme');
    const data = imgRes.data;
    const caption = data.caption + ' [' + data.category + ']';

    await ctx.replyWithPhoto(data.image, {
        caption: caption
    });
    console.log(`${'Meme: '.blue}${data.image}\n${caption.dim}`);
}

// Sending file from Advanced Dog/Cat API
async function sendFileFromAdvancedApi(ctx, type) {
    const apiParams = advancedAPI.getApiParams(type);

    // Processing arguments
    const text = ctx.message.text;
    const args = text.split(' ');
    args.shift();

    // Processing formats
    let photoType = 'jpg,png';
    if (args.length === 0 || args[0].toLowerCase() === 'photo') {
        photoType = 'jpg,png';
        await bot.telegram.sendChatAction(ctx.chat.id, 'upload_photo');
    }
    else if (args[0].toLowerCase() === 'gif') {
        photoType = 'gif';
        await bot.telegram.sendChatAction(ctx.chat.id, 'upload_video');
    }
    else {
        await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç');
        return;
    }

    // Making HTTP GET request in ./src/dogcat-api.js
    const result = await advancedAPI.loadFileFromAdvancedApi(apiParams.url, apiParams.key, {
        'mime_types': photoType,
        'size': 'small',
        'sub_id': ctx.from.username,
        'limit': 1
    }); //console.log(result);

    // Processing data
    const url = result.data[0].url;
    if (url.endsWith('.jpg') || url.endsWith('.png')) {
        // If result is image
        await ctx.replyWithPhoto(url, {
            caption: result.data[0].id,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚ù§', callback_data: `${apiParams.typeEN}_upvote` },
                        { text: 'ü§¢', callback_data: `${apiParams.typeEN}_downvote` }
                    ]
                ]
            }
        });
    }
    else if (url.endsWith('.gif')) {
        // If result is animation
        await bot.telegram.sendAnimation(ctx.chat.id, result.data[0].url, {
            caption: result.data[0].id,
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '‚ù§', callback_data: `${apiParams.typeEN}_upvote` },
                        { text: 'ü§¢', callback_data: `${apiParams.typeEN}_downvote` }
                    ]
                ]
            }
        });
    }

    console.log(`–§–æ—Ç–æ ${apiParams.typeRU–∞}–∞: ${result.data[0].url}`);
}

// Handling votes from message with dog/cat image from Advanced API
async function handleVoteForFileFromAdvancedApi(ctx, type, value) {
    const apiParams = advancedAPI.getApiParams(type);

    const result = await advancedAPI.voteForFileFromAdvancedApi(apiParams.url, apiParams.key, {
        image_id: ctx.update.callback_query.message.caption,
        sub_id: ctx.update.callback_query.from.username,
        value: value
    });
    if (result.status === 200)
        await ctx.answerCbQuery(`–í—ã –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ ${((value === 1) ? '–∑–∞' : '–ø—Ä–æ—Ç–∏–≤')} —ç—Ç–æ–≥–æ ${apiParams.typeRU}–∞!`);
    else
        await ctx.answerCbQuery(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ ${result.status} –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ API`);
}
